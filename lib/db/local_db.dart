import 'dart:io';
import 'package:drift/drift.dart';
import 'package:drift/native.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import '../db/listing_model.dart';
import '../models/user_profile_model.dart'; // import your user profile model
part 'local_db.g.dart';

// Listings table already assumed defined elsewhere or generated by drift from model

class Listings extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get title => text()();
  TextColumn get description => text()();
  TextColumn get imagePath => text()();
  RealColumn get price => real()();
  TextColumn get location => text()();
  TextColumn get category => text()();
  TextColumn get contact => text()();
  DateTimeColumn get createdAt => dateTime().withDefault(currentDateAndTime)();
  BoolColumn get delivery => boolean().withDefault(const Constant(false))();
}

// New UserProfiles table
class UserProfiles extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get fullName => text()();
  TextColumn get email => text()();
  TextColumn get phone => text()();
  TextColumn get location => text()();
  TextColumn get profileImagePath => text().nullable()();
}

class Donations extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get title => text()();
  TextColumn get description => text()();
  TextColumn get category => text()();
  TextColumn get location => text()();
  TextColumn get contact => text()();
  TextColumn get donorName => text().nullable()();
  TextColumn get imagePath => text().nullable()();
  DateTimeColumn get dateAdded => dateTime().withDefault(currentDateAndTime)();
}

@DriftDatabase(tables: [Listings, UserProfiles])
class LocalDatabase extends _$LocalDatabase {
  LocalDatabase() : super(_openConnection());

  @override
  int get schemaVersion => 1;

  // Listings CRUD
  Future<int> insertListing(ListingsCompanion entry) =>
      into(listings).insert(entry);

  Future<List<Listing>> getAllListings() => select(listings).get();

  Future<void> deleteListing(int id) =>
      (delete(listings)..where((tbl) => tbl.id.equals(id))).go();

  Future<bool> updateListing(Listing listing) {
    return update(listings).replace(listing);
  }

  // UserProfiles CRUD
  Future<int> upsertUserProfile(UserProfilesCompanion entry) =>
      into(userProfiles).insertOnConflictUpdate(entry);

  Future<UserProfile?> getUserProfile() async {
    final result = await select(userProfiles).getSingleOrNull();
    if (result == null) return null;
    return UserProfile.fromMap(result.data);
  }
}

LazyDatabase _openConnection() {
  return LazyDatabase(() async {
    final dir = await getApplicationDocumentsDirectory();
    final dbPath = p.join(dir.path, 'zimfarmlink.db');
    return NativeDatabase(File(dbPath));
  });
}
